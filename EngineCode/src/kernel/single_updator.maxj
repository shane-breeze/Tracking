package kernel;

import kalman.KFUpdator;
import kalman.ProjectMatrix;
import matrix.SymMatrix;
import matrix.Vector;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

import formats.TrajectoryState;

public class single_updator extends Kernel{

	DFEType T = DFETypeFactory.dfeFloat(8, 24);

	public single_updator(KernelParameters params){
		super(params);

		int D = 2;
		int N = 5;

		ProjectMatrix pf = new ProjectMatrix(new int[]{3, 4}, D, N); // Projection matrix H

		// Input the trajectory
		DFEStruct tsData = io.input("trajectoryState", TrajectoryState.ioType(T, N));
		DFEVector<DFEVar> xData = (DFEVector<DFEVar>) tsData["v"];
		DFEVector<DFEVar> cData = (DFEVector<DFEVar>) tsData["m"];
		Vector x = new Vector(xData);
		SymMatrix<DFEVar> C = new SymMatrix<DFEVar>(this, cData.packToList());
		TrajectoryState ts = new TrajectoryState(x, C);

		KFUpdator updator = new KFUpdator(this);
		updator.update(ts, r, rMeas, V, VMeas, pf);
	}

}
