package kernel;

import java.util.ArrayList;
import java.util.List;

import kalman.KFUpdator;
import kalman.ProjectMatrix;
import matrix.SymMatrix;
import matrix.Vector;
import maxpower.kernel.io.ZeroLatencyInput;
import misc.Misc;
import sort.BestOfStream;
import sort.BestOfStreamWithMetadata;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.StructFieldType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

import formats.TrackingRecHit;
import formats.TrajectoryState;

public class KOneState_nHit extends Kernel{

	public static DFEType T = DFETypeFactory.dfeFloat(8, 24);
	public static int D = 2;
	public static int N = 5;
	public static int maxStates = 5;
	public static double lostHitPenalty = 1.;

	public KOneState_nHit(KernelParameters params){
		super(params);
		ProjectMatrix pf = new ProjectMatrix(new int[]{3, 4}, D, N); // Projection matrix H

		// Input the hit
		StructFieldType sftHit = new StructFieldType("hit", TrackingRecHit.ioType(T, D));
		DFEStructType tHit = Misc.addPCIEPadding(new StructFieldType[]{sftHit}).data();
		DFEStruct inHitData = io.input("hit", tHit);
		DFEVar nHitsTotal = io.scalarInput("nHitsTotal", dfeUInt(32));

		// Make a type for the trajectory
		StructFieldType sftTrajectory = new StructFieldType("trajectoryState", TrajectoryState.ioType(T, N));
		DFEStructType tTrajectory = Misc.addPCIEPadding(new StructFieldType[]{sftTrajectory}).data();

		/*
		 * We need to streamHold the enable signal (then negative offset) as the scheduler
		 * will not allow us to create a loop with no latency anywhere.
		 */
		DFEVar  iEnable = dfeBool().newInstance(this);
		DFEVar _iEnable = stream.offset(iEnable, -1); // first cycle value (true) comes from streamHold reset below

		DFEStruct iState = ZeroLatencyInput.input("state", tTrajectory, _iEnable);
		DFEVar iNHitsPerState = ZeroLatencyInput.input("nHits", dfeUInt(32), _iEnable);

		// Global tick counter
		Counter runCycleCounter = control.count.makeCounter(control.count.makeParams(32));
		DFEVar runCycleCount = runCycleCounter.getCount();

		// Counter for number of hits read for this state
		Params cParams = control.count.makeParams(32).withMax(iNHitsPerState);
		Counter count = control.count.makeCounter(cParams);
		count.getCount().setReportOnUnused(false);

		iEnable <== Reductions.streamHold(count.getWrap(), constant.var(true), dfeBool().encodeConstant(true));

		// Repackage the trajectory
		DFEStruct tsData = (DFEStruct) iState.get("trajectoryState");
		DFEVector<DFEVar> xData = (DFEVector<DFEVar>) tsData.get(TrajectoryState.label.X.label());
		DFEVector<DFEVar> cData = (DFEVector<DFEVar>) tsData.get(TrajectoryState.label.C.label());;
		Vector x = new Vector(xData);
		SymMatrix<DFEVar> C = new SymMatrix<DFEVar>(this, cData.packToList());
		TrajectoryState ts = new TrajectoryState(x, C);

		//Repackage the hit
		DFEStruct hitData = (DFEStruct) inHitData.get("hit");
		TrackingRecHit hit = new TrackingRecHit(hitData);
		KFUpdator updator = new KFUpdator(this);

		// Do the update
		TrajectoryState ts_up = updator.update(ts, hit, pf);

    // Accumulate the best states according by (chi^2 + lost_hits * lost_hit_penalty)
		/*DFEVar comparisonValue = hit.chiSquared() + lostHitPenalty * hit.lostHits(); // TODO implement all of these
		List<Reductions.ReducedStreamInfo<DFEStruct>> bestStateReductions = (new BestOfStreamWithMetadata<DFEStruct>(this, BestOfStream.Mode.MIN, maxStates, comparisonValue, ts_up.packForIO())).best();
		List<DFEStruct> bestStates = new ArrayList<DFEStruct>();
		for(Reductions.ReducedStreamInfo<DFEStruct> stateReduction : bestStateReductions){
			bestStates.add(stateReduction.getMetaData());
		}

		DFEVar readOutEnable = runCycleCount >= nHitsTotal;
		Counter readOutSelect = control.count.makeCounter(control.count.makeParams(3).withEnable(readOutEnable).withMax(maxStates));

		DFEStruct outData = control.mux(readOutSelect.getCount(), bestStates);*/
    DFEStruct outData = ts_up.packForIO();
    DFEVar readOutEnable = constant.var(true);

		io.output("state_up", outData, ts_up.ioType(), readOutEnable);

		xData.simWatch("X");
		hit.pos().watch("hit_pos");
	}
}
