package trackfit;

import matrix.Matrix;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class Util extends KernelLib{

	public static final int N_STUBS_IN = 1;
	public static final int N_ITERATIONS = 1;


	/*public static DFEVar[][] Pdd_meas(Kernel owner){
		DFEVar[][] result = new DFEVar[2][2];
		result[0][0] = owner.constant.var(dfeFix(2,2, SignMode.TWOSCOMPLEMENT),1/4);
		result[1][1] = owner.constant.var(dfeFix(2,2, SignMode.TWOSCOMPLEMENT),1/4);
		result[0][1] = owner.constant.var(dfeUInt(1), 0);
		result[1][0] = owner.constant.var(dfeUInt(1), 0);
		return result;
	}*/

	public static Matrix Pdd_meas(Kernel owner){
		DFEVar[][] result = new DFEVar[2][2];
		result[0][0] = owner.constant.var(dfeFix(2,2, SignMode.TWOSCOMPLEMENT),1/4);
		result[1][1] = owner.constant.var(dfeFix(2,2, SignMode.TWOSCOMPLEMENT),1/4);
		result[0][1] = owner.constant.var(dfeUInt(1), 0);
		result[1][0] = owner.constant.var(dfeUInt(1), 0);
		return new Matrix(result);
	}

	public static DFEVar[] StateNoise(Kernel owner){
		DFEVar[] result = new DFEVar[2];
		// TODO Generic values
		result[0] = owner.constant.var(dfeFix(0, 6, SignMode.TWOSCOMPLEMENT), 0.01);
		result[1] = owner.constant.var(dfeFix(0, 6, SignMode.TWOSCOMPLEMENT), 0.01);
		return result;
	}

	public static DFEVar[][] Pxx_model(Kernel owner){
		DFEVar[][] result = new DFEVar[4][4];
		for(int i = 0; i < 4; i++){
			for(int j = 0; j < 4; j++){
				if(i == j)
					result[i][j] = owner.constant.var(dfeFix(0, 6, SignMode.TWOSCOMPLEMENT), 0.01); // TODO generic values
				else
					result[i][j] = owner.constant.var(dfeUInt(1), 0);
			}
		}
		return result;
	}
	public Util(Kernel owner){
		super(owner);
	}
}
