package kalman;

import matrix.LinAlg;
import matrix.Matrix;
import matrix.SymMatrix;
import matrix.Vector;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import division.Inverter;
import formats.TrackingRecHit;
import formats.TrajectoryState;

public class KFUpdator extends KernelLib{

	Kernel owner;

	private static class lowLatencyInvert implements Inverter{
		@Override
		public DFEVar invert(DFEVar x){
			return division.Divider.reducedLUTDivideFloat(x, 11, 25);
		}
	}

	public KFUpdator(Kernel owner){
		super(owner);
		this.owner = owner;

	}

	public TrajectoryState update(TrajectoryState state, TrackingRecHit hit, ProjectMatrix H){

		Vector x = state.vector();
		Matrix C = state.matrix();
		Vector r = hit.pos();
		Vector rMeas = (Vector) (H.H(owner) * x);

		SymMatrix<DFEVar> V = hit.errors();
		SymMatrix<DFEVar> VMeas = new SymMatrix<DFEVar>((Matrix) (H.H(owner) * C * LinAlg.transpose(H.H(owner))));

		int dimension = C.nCols();
		r -= rMeas;

		SymMatrix<DFEVar> R = V + VMeas;

		Matrix.setInversionAlgorithm(new lowLatencyInvert());
		Matrix RInv = R.matrix().inverse();

		Matrix K = (Matrix) ((C * LinAlg.transpose(H.H(owner))) * RInv);
		Matrix KH = (Matrix) (K * H.H(owner));

		Matrix M = Matrix.identity(owner, dimension) - KH;

		Vector x_up = x + (Vector) (K * r);

		Matrix C_up = (Matrix) (M * C * M) + (Matrix) (K * V.matrix() * LinAlg.transpose(K));

		return new TrajectoryState(x_up, C_up);
	}

}
